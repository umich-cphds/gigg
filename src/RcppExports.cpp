// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// chol_solve
arma::colvec chol_solve(arma::mat& M, arma::colvec& V);
RcppExport SEXP _gigg_chol_solve(SEXP MSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_solve(M, V));
    return rcpp_result_gen;
END_RCPP
}
// rgig_cpp
double rgig_cpp(double chi, double psi, double lambda);
RcppExport SEXP _gigg_rgig_cpp(SEXP chiSEXP, SEXP psiSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type chi(chiSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rgig_cpp(chi, psi, lambda));
    return rcpp_result_gen;
END_RCPP
}
// quick_solve
arma::colvec quick_solve(arma::mat& XtX_inv, arma::colvec& D_pos, arma::colvec& vec_draw);
RcppExport SEXP _gigg_quick_solve(SEXP XtX_invSEXP, SEXP D_posSEXP, SEXP vec_drawSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type XtX_inv(XtX_invSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type D_pos(D_posSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type vec_draw(vec_drawSEXP);
    rcpp_result_gen = Rcpp::wrap(quick_solve(XtX_inv, D_pos, vec_draw));
    return rcpp_result_gen;
END_RCPP
}
// gigg_fixed_gibbs_sampler
List gigg_fixed_gibbs_sampler(arma::mat& X, arma::mat& C, arma::colvec& Y, arma::rowvec& grp_idx, arma::rowvec& grp_size, arma::rowvec& grp_size_cs, arma::colvec& alpha_inits, arma::colvec& beta_inits, arma::colvec& lambda_sq_inits, arma::colvec& gamma_sq_inits, arma::colvec& eta_inits, arma::colvec& p, arma::colvec& q, double tau_sq_init, double sigma_sq_init, double nu_init, int n_burn_in, int n_samples, int n_thin, double stable_const, bool verbose, bool btrick, bool stable_solve);
RcppExport SEXP _gigg_gigg_fixed_gibbs_sampler(SEXP XSEXP, SEXP CSEXP, SEXP YSEXP, SEXP grp_idxSEXP, SEXP grp_sizeSEXP, SEXP grp_size_csSEXP, SEXP alpha_initsSEXP, SEXP beta_initsSEXP, SEXP lambda_sq_initsSEXP, SEXP gamma_sq_initsSEXP, SEXP eta_initsSEXP, SEXP pSEXP, SEXP qSEXP, SEXP tau_sq_initSEXP, SEXP sigma_sq_initSEXP, SEXP nu_initSEXP, SEXP n_burn_inSEXP, SEXP n_samplesSEXP, SEXP n_thinSEXP, SEXP stable_constSEXP, SEXP verboseSEXP, SEXP btrickSEXP, SEXP stable_solveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type grp_idx(grp_idxSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type grp_size(grp_sizeSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type grp_size_cs(grp_size_csSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type alpha_inits(alpha_initsSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type beta_inits(beta_initsSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type lambda_sq_inits(lambda_sq_initsSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type gamma_sq_inits(gamma_sq_initsSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type eta_inits(eta_initsSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type tau_sq_init(tau_sq_initSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_sq_init(sigma_sq_initSEXP);
    Rcpp::traits::input_parameter< double >::type nu_init(nu_initSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn_in(n_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type stable_const(stable_constSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type btrick(btrickSEXP);
    Rcpp::traits::input_parameter< bool >::type stable_solve(stable_solveSEXP);
    rcpp_result_gen = Rcpp::wrap(gigg_fixed_gibbs_sampler(X, C, Y, grp_idx, grp_size, grp_size_cs, alpha_inits, beta_inits, lambda_sq_inits, gamma_sq_inits, eta_inits, p, q, tau_sq_init, sigma_sq_init, nu_init, n_burn_in, n_samples, n_thin, stable_const, verbose, btrick, stable_solve));
    return rcpp_result_gen;
END_RCPP
}
// digamma_inv
double digamma_inv(double y, double precision);
RcppExport SEXP _gigg_digamma_inv(SEXP ySEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(digamma_inv(y, precision));
    return rcpp_result_gen;
END_RCPP
}
// gigg_mmle_gibbs_sampler
List gigg_mmle_gibbs_sampler(arma::mat& X, arma::mat& C, arma::colvec& Y, arma::rowvec& grp_idx, arma::rowvec& grp_size, arma::rowvec& grp_size_cs, arma::colvec& alpha_inits, arma::colvec& beta_inits, arma::colvec& lambda_sq_inits, arma::colvec& gamma_sq_inits, arma::colvec& eta_inits, arma::colvec& p_inits, arma::colvec& q_inits, double tau_sq_init, double sigma_sq_init, double nu_init, int n_burn_in, int n_samples, int n_thin, double stable_const, bool verbose, bool btrick, bool stable_solve);
RcppExport SEXP _gigg_gigg_mmle_gibbs_sampler(SEXP XSEXP, SEXP CSEXP, SEXP YSEXP, SEXP grp_idxSEXP, SEXP grp_sizeSEXP, SEXP grp_size_csSEXP, SEXP alpha_initsSEXP, SEXP beta_initsSEXP, SEXP lambda_sq_initsSEXP, SEXP gamma_sq_initsSEXP, SEXP eta_initsSEXP, SEXP p_initsSEXP, SEXP q_initsSEXP, SEXP tau_sq_initSEXP, SEXP sigma_sq_initSEXP, SEXP nu_initSEXP, SEXP n_burn_inSEXP, SEXP n_samplesSEXP, SEXP n_thinSEXP, SEXP stable_constSEXP, SEXP verboseSEXP, SEXP btrickSEXP, SEXP stable_solveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type grp_idx(grp_idxSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type grp_size(grp_sizeSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type grp_size_cs(grp_size_csSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type alpha_inits(alpha_initsSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type beta_inits(beta_initsSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type lambda_sq_inits(lambda_sq_initsSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type gamma_sq_inits(gamma_sq_initsSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type eta_inits(eta_initsSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type p_inits(p_initsSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type q_inits(q_initsSEXP);
    Rcpp::traits::input_parameter< double >::type tau_sq_init(tau_sq_initSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_sq_init(sigma_sq_initSEXP);
    Rcpp::traits::input_parameter< double >::type nu_init(nu_initSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn_in(n_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type stable_const(stable_constSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type btrick(btrickSEXP);
    Rcpp::traits::input_parameter< bool >::type stable_solve(stable_solveSEXP);
    rcpp_result_gen = Rcpp::wrap(gigg_mmle_gibbs_sampler(X, C, Y, grp_idx, grp_size, grp_size_cs, alpha_inits, beta_inits, lambda_sq_inits, gamma_sq_inits, eta_inits, p_inits, q_inits, tau_sq_init, sigma_sq_init, nu_init, n_burn_in, n_samples, n_thin, stable_const, verbose, btrick, stable_solve));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gigg_chol_solve", (DL_FUNC) &_gigg_chol_solve, 2},
    {"_gigg_rgig_cpp", (DL_FUNC) &_gigg_rgig_cpp, 3},
    {"_gigg_quick_solve", (DL_FUNC) &_gigg_quick_solve, 3},
    {"_gigg_gigg_fixed_gibbs_sampler", (DL_FUNC) &_gigg_gigg_fixed_gibbs_sampler, 23},
    {"_gigg_digamma_inv", (DL_FUNC) &_gigg_digamma_inv, 2},
    {"_gigg_gigg_mmle_gibbs_sampler", (DL_FUNC) &_gigg_gigg_mmle_gibbs_sampler, 23},
    {NULL, NULL, 0}
};

RcppExport void R_init_gigg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
